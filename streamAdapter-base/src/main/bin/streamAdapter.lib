#!/bin/bash
# ********************************************************************
# Ericsson Radio Systems AB                                     SCRIPT
# ********************************************************************
#
#
# (c) Ericsson Radio Systems AB 2013 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used 
# and/or copied only with the written permission from Ericsson Radio 
# Systems AB or in accordance with the terms and conditions stipulated 
# in the agreement/contract under which the program(s) have been 
# supplied.
#
# ********************************************************************
# Name    : streamAdapter.lib
# Date    : 08/11/2013
# Purpose : Script that will start/stop/status Stream Adapter
###_VERSION_##
# ********************************************************************
#
#     Command Section
#
# ********************************************************************
AWK=/usr/bin/awk
BASENAME=/usr/bin/basename
CAT=/usr/bin/cat
CHMOD=/usr/bin/chmod
CHOWN=/usr/bin/chown
CLEAR=/usr/bin/clear
CP=/usr/bin/cp
CUT=/usr/bin/cut
DATE=/usr/bin/date
DIRNAME=/usr/bin/dirname
DOMAINNAME=/usr/bin/domainname
DTCONFIG=/usr/dt/bin/dtconfig
ECHO=/usr/bin/echo
EGREP=/usr/bin/egrep
EJECT=/usr/bin/eject
ENV=/usr/bin/env
EXPR=/usr/bin/expr
FIND=/usr/bin/find
FORMAT=/usr/sbin/format
FUSER=/usr/sbin/fuser
GEGREP=/usr/sfw/bin/gegrep
GETENT=/usr/bin/getent
GETTEXT=/usr/bin/gettext
GREP=/usr/bin/grep
GROUPADD=/usr/sbin/groupadd
GTAR=/usr/sfw/bin/gtar
GZCAT=/usr/bin/gzcat
HEAD=/usr/bin/head
MYHOSTNAME=/usr/bin/hostname
ID=/usr/bin/id
INIT=/usr/sbin/init
KILL=/usr/bin/kill
LS=/usr/bin/ls
LSOF=/usr/local/bin/lsof
MKDIR=/usr/bin/mkdir
MORE=/usr/bin/more
MV=/usr/bin/mv
NAWK=/usr/bin/nawk
PGREP=/usr/bin/pgrep
PING=/usr/sbin/ping
PKGADD=/usr/sbin/pkgadd
PKGINFO=/usr/bin/pkginfo
PRTCONF=/usr/sbin/prtconf
PRINTF=/usr/bin/printf
PS=/usr/bin/ps
PWD=/usr/bin/pwd
RM=/usr/bin/rm
RCP=/usr/bin/rcp
ROLES=/usr/bin/roles
RSH=/usr/bin/rsh
SED=/usr/bin/sed
SLEEP=/usr/bin/sleep
SORT=/usr/bin/sort
SU=/usr/bin/su
SVCADM=/usr/sbin/svcadm
SVCCFG=/usr/sbin/svccfg
SVCS=/usr/bin/svcs
SYNC=/usr/sbin/sync
TAIL=/usr/bin/tail
TEE=/usr/bin/tee
TOUCH=/usr/bin/touch
TPUT=/usr/bin/tput
UADMIN=/usr/sbin/uadmin
UNAME=/usr/bin/uname
USERADD=/usr/sbin/useradd
VOLD=/usr/sbin/vold
WC=/usr/bin/wc
ZFS=/usr/sbin/zfs
ZPOOL=/usr/sbin/zpool
# ********************************************************************
#
#       Configuration Section
#
# ********************************************************************


# Directory on the root filesystem
ENIQ_ROOT_DIR=/eniq
JPS=/usr/jdk/latest/bin/jps
if [ ! -s ${JPS} ]; then
    _err_msg_="File ${JPS} is empty"
    abort_script "$_err_msg_" 
fi
# Source the common functions
if [ -s ${ENIQ_ROOT_DIR}/installation/core_install/lib/common_functions.lib ]; then
	. ${ENIQ_ROOT_DIR}/installation/core_install/lib/common_functions.lib
else
	_err_msg_="File ${ENIQ_ROOT_DIR}/installation/core_install/lib/common_functions.lib not found"
	abort_script "$_err_msg_"
fi
# ********************************************************************
#
#   functions
#
# ********************************************************************

### Function: abort_script ###
#
#   This will is called if the script is aborted thru an error
#   error signal sent by the kernel such as CTRL-C or if a serious
#   error is encountered during runtime
#
# Arguments:
#       $1 - Error message from part of program (Not always used)
# Return Values:
#       none
function abort_script()
{
    _err_time_=`$DATE '+%Y-%b-%d_%H.%M.%S'`

    if [ "$1" ]; then
        _err_msg_="${_err_time_} - $1"
    else
        _err_msg_="${_err_time_} - Script aborted.......\n"    
    fi
    if [ "${LOGFILE}" ]; then
        $ECHO "\nERROR : ${_err_msg_}\n" | $TEE -a ${LOGFILE}
    else
        $ECHO "\nERROR : ${_err_msg_}\n"
    fi

    cd $SCRIPTHOME

    if [ "$2" ]; then
        ${2}
    else
       exit 1
    fi
}

function check_action()
{
	if [ ! `echo $ACTION | egrep "^start$|^stop$|^status$|^restart$"` ]; then
		show_help
		exit 1
	fi
}
function check_id()
{
	_check_id_=`$ID | $AWK -F\( '{print $2}' | $AWK -F\) '{print $1}'`
	if [ "$_check_id_" != "$1" ]; then
		_err_msg_="You must be $1 to execute this script."
		abort_script "${_err_msg_}"
	fi
}
function show_help () {
    $PRINTF "usage:\t%s -a [start|stop|status]  \n" ${0##*/}
    #[-Xmx=MAXIMUM_HEAP[g|m]] [-Xmn=YOUNG_HEAP[g|m]] [-f INI_FILE] ]
    $PRINTF "\tThese arguments *must* appear before any other arguments or they may not be parsed.\n"
    #$PRINTF "\tParsing ends after '--' or the first argument not beginning with '-'. \n"
} >&2

# Init script helper functions
function get_jvms() {
    JVMS_INI=$($CAT ${INI_FILE} | $EGREP "^JVM[0-9]+=" | $CUT -d'=' -f2 | $SED -e 's/\n//g' -e 's/ //g')
    if [ ! "${JVMS_INI}" ]; then
        _err_msg_="NO JVMs set in ${INI_FILE}"
        abort_script "$_err_msg_" 
    fi
}

function get_run_server_ips() {
	local service_name="$1"
	local jvms_ip=""
	local ips=""
	get_jvms
	IP_JVMS=""
	for i in $JVMS_INI ; do
		mz_service=$(iniget $i -f ${INI_FILE} -v ${MZ_SERVER_VAR_INI})
		if [ ! "${mz_service}" ]; then
			_err_msg_="${MZ_SERVER_VAR_INI} not set for $i"
			abort_script "$_err_msg_"
		fi
		server_ip=$(iniget $i -f ${INI_FILE} -v ${SERVER_VAR_INI})
		if [ ! "${server_ip}" ]; then
			_err_msg_="${SERVER_VAR_INI} not set for $i"
			abort_script "$_err_msg_"
		else
			server_ip=`$GETENT hosts ${server_ip} | nawk '{print $1}' | head -1`
			if [ ! "${server_ip}" ]; then
				_err_msg_="Could not get ipaddress for $HOSTNAME"
				abort_script "$_err_msg_" 
			fi
		fi
		if [ ! "$(echo $ips | grep ${server_ip})" ]; then
			ips="${ips} ${server_ip}"
		fi
		if [ "${service_name}" ]; then
			if [ "$(echo ${mz_service} | grep -wi ${service_name})" ]; then
			 jvms_ip="${jvms_ip} ${i}:${server_ip}"
			fi
		else
			jvms_ip="${jvms_ip} ${i}:${server_ip}"
		fi
	done
	for j in $ips ; do
		local jvms_tmp=""
		for k in $jvms_ip ; do
			if [ "$(echo $k | grep ${j})" ]; then
				jvm_k=$(echo $k | sed -e "s/\:${j}//g")
				jvms_tmp="$jvms_tmp $jvm_k"
			fi
		done
		jvms_tmp=$(echo "${jvms_tmp}"| sed -e "s/^ //g")
		IP_JVMS="${IP_JVMS},${j}:${jvms_tmp}"
	done
	IP_JVMS=$(echo "${IP_JVMS}" | sed 's/^,//g')
	export IP_JVMS
}

# Init script helper functions
function get_free_jmx_port() {
  local _no_count_=10
  local _count_=1
  local _port_found_=1
  until [ "$_count_" -eq "$_no_count_" ]; do 
    sleep 1
    local output
    output=`$LSOF -i -P | $EGREP ":$JMX_PORT "`
    if [ -z "$output" ]; then
        _port_found_=0
        break
    fi
    (( JMX_PORT+=1 ))
    (( _count_+=1 ))
  done
    if [ $_port_found_ -ne 0 ]; then
        _err_msg_="Can't get a free port, tried $_count_ ports before $JMX_PORT"
        abort_script "$_err_msg_" 
    fi
}

function get_absolute_path() 
{
    local _dir_=`$DIRNAME $0`
    SCRIPTHOME=`cd $_dir_ 2>/dev/null && pwd || $ECHO $_dir_`
}

